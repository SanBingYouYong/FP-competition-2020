STEP 1:
	Install an Auto-Refresher for your web-browser.
	For Google Chrome I used "Easy Auto Refresh"
	https://chrome.google.com/webstore/detail/easy-auto-refresh/aabcgdmkeabbnleenpncegpcngjpnjkc?hl=en
	(This step is 'technically' optional as you could just hit f5 every second)

STEP 3:
	Open the "ConGoL.hs" file through GHCI.
	(In the terminal enter: ghci, :cd --pathwaytofile--, :l ConGoL)

STEP 4:
	Before running any actual patterns I'd recommend running the empty grid so you can access the output file.
	=> runCommandListFixed 1 emptyGrid

STEP 5:
	Open up the output file and Set the time interval for the auto-refresh to 1 second.
	This will be in the instructions of the chosen auto-refresher.
	For "Easy Auto Refresh" click on the icon for chrome extensions, click on Easy Auto Refresh, Set the time to 1 and click "Start"

Now the Auto-Refresher is set up, the output file is visible and the functions are runnable it doesn't matter what order you do the following in.

RUNNING GRID:
	There are 2 ways to execute the main program, it will either run infinitely or for a fixed number of iterations.
	I'd recommend using the function for running a fixed number of times as if it runs infinitely you will have to kill the program and start from the start.

RUNNING A FIXED NUMBER OF ITERATIONS:
	To run through a set number of iterations use the command:
	=>	runCommandListFixed n gridName
	Where n is a given number of times and gridName is the name of a grid. For example:
	=>	runCommandListFixed 5 testGrid1
	Will run the given testGrid1 for 5 iterations.

RUNNING INFINITE ITERATIONS:
	To run the iterations infinitely use the command:
	=> 	runCommandListInfinite gridName
	where gridName is the name of the grid. For example:
	=>	runCommandListInfinite testGrid1
	Will run the testGrid1 infinitely until it is killed through terminal.

TEST GRIDS:
	There are 5 test grids that I created.
	To run these use the commands discussed previously. The names of the grids are:
	testGrid1, testGrid2, testGrid3, testGrid4, testGrid5

CREATING GRIDS:
	While creating grids it is useful to start with the emptyGrid which is a grid where everything is dead.
	There are 2 ways of creating grids:
	gridEdit - 		which takes one grid, a coordinate that you want to change the state of and a new state and returns the new grid.
				For example 
				=> (gridEdit (gridEdit (gridEdit emptyGrid (3,2) Alive) (1,2) Alive) (2,2) Alive) 
				is what was used to create testGrid1.
				However, I would not recommend using testGrid to create new grids from scratch merely for editing an already existing grid.

	 gridAliveMultiple - 	takes a grid and a list of coordinates and sets all the coordinates given to the alive state. 
				This is what I'd recommend using for creating your own grids. 
				For example:
				=> gridAliveMultiple emptyGrid [(9,8),(10,8),(11,8),(10,9),(10,10),(10,11)]
				Which is the code that was used to create testGrid4.